-- API 키 관리 테이블
CREATE TABLE IF NOT EXISTS api_keys (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    key VARCHAR(255) NOT NULL UNIQUE,
    description TEXT,
    is_active BOOLEAN DEFAULT true,
    usage_limit INTEGER DEFAULT NULL, -- NULL이면 무제한
    usage_count INTEGER DEFAULT 0,
    rate_limit INTEGER DEFAULT 100, -- 분당 요청 수 제한
    allowed_origins TEXT[], -- 허용된 도메인 목록
    expires_at TIMESTAMPTZ DEFAULT NULL, -- NULL이면 무기한
    created_by UUID REFERENCES profiles(id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- API 키 사용 로그 테이블
CREATE TABLE IF NOT EXISTS api_key_logs (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    api_key_id UUID REFERENCES api_keys(id) ON DELETE CASCADE,
    endpoint VARCHAR(255) NOT NULL,
    method VARCHAR(10) NOT NULL,
    status_code INTEGER,
    ip_address VARCHAR(45),
    user_agent TEXT,
    request_body JSONB,
    response_time INTEGER, -- 밀리초
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- 인덱스
CREATE INDEX idx_api_keys_key ON api_keys(key);
CREATE INDEX idx_api_keys_active ON api_keys(is_active);
CREATE INDEX idx_api_key_logs_api_key_id ON api_key_logs(api_key_id);
CREATE INDEX idx_api_key_logs_created_at ON api_key_logs(created_at);

-- RLS 정책
ALTER TABLE api_keys ENABLE ROW LEVEL SECURITY;
ALTER TABLE api_key_logs ENABLE ROW LEVEL SECURITY;

-- 관리자만 API 키 관리 가능
CREATE POLICY "Admin users can manage API keys" ON api_keys
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM admin_users 
            WHERE admin_users.id = auth.uid()
        )
    );

-- API 키 로그는 해당 API 키 소유자(관리자)만 조회 가능
CREATE POLICY "Admin users can view API key logs" ON api_key_logs
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM admin_users 
            WHERE admin_users.id = auth.uid()
        )
    );

-- 기본 API 키 생성 함수
CREATE OR REPLACE FUNCTION generate_api_key() RETURNS VARCHAR AS $$
BEGIN
    RETURN 'pk_' || encode(gen_random_bytes(32), 'hex');
END;
$$ LANGUAGE plpgsql;

-- API 키 사용 카운트 증가 함수
CREATE OR REPLACE FUNCTION increment_api_key_usage(p_api_key VARCHAR) RETURNS VOID AS $$
BEGIN
    UPDATE api_keys 
    SET usage_count = usage_count + 1,
        updated_at = NOW()
    WHERE key = p_api_key AND is_active = true;
END;
$$ LANGUAGE plpgsql;