import React, { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/router';
import Image from 'next/image';
import Link from 'next/link';
import { useAuth } from '@/contexts/AuthContext';
import { useBookmarks } from '@/hooks/useBookmarks';
import Header from '@/components/Header';
import Toast from '@/components/Toast';
import RatingSystem from '@/components/RatingSystem';
import CommentSection from '@/components/CommentSection';
import SharePrompt from '@/components/SharePrompt';
import { Prompt } from '@/types/prompt';

const PromptDetailPage = () => {
  const router = useRouter();
  const { id } = router.query;
  const { isAuthenticated, user } = useAuth();
  const { bookmarks, addBookmark, removeBookmark } = useBookmarks();
  const [showLoginModal, setShowLoginModal] = useState(false);
  const [showToast, setShowToast] = useState(false);
  const [toastMessage, setToastMessage] = useState('');
  const [toastType, setToastType] = useState<'success' | 'error' | 'info'>('success');
  const [prompt, setPrompt] = useState<Prompt | null>(null);
  const [loading, setLoading] = useState(true);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [localBookmarkState, setLocalBookmarkState] = useState(false);

  // ... (이전 코드와 동일)

  return (
    <>
      <Header />
      <main className="min-h-screen bg-gray-50">
        <div className="container mx-auto px-4 pt-2 pb-2 max-w-4xl">
          <div className="bg-white rounded-lg shadow-sm p-3 mb-3">
            {/* 상단 정보 */}
            <div className="flex items-start justify-between mb-2">
              <div className="flex-1">
                <h1 className="text-xl font-bold mb-1">{prompt.title}</h1>
                <div className="flex items-center gap-3 text-xs text-gray-600">
                  <span className="font-medium">{prompt.author.name}</span>
                  <span>•</span>
                  <span>{prompt.date}</span>
                  <span>•</span>
                  <div className="flex items-center gap-1">
                    <svg className="w-4 h-4 text-yellow-500 fill-current" viewBox="0 0 20 20">
                      <path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z" />
                    </svg>
                    <span className="font-semibold">{prompt.rating.toFixed(1)}</span>
                  </div>
                </div>
              </div>
              
              {/* 작성자 버튼 */}
              {isAuthor && (
                <div className="flex gap-2 ml-4">
                  <button onClick={handleEdit} className="px-3 py-1.5 text-sm bg-primary text-white rounded-lg hover:bg-orange-600 transition-colors">
                    수정
                  </button>
                  <button onClick={handleDelete} className="px-3 py-1.5 text-sm bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors">
                    삭제
                  </button>
                </div>
              )}
              
              {/* 북마크 버튼 */}
              {isAuthenticated && (
                <div className="flex gap-2 ml-4">
                  <button
                    onClick={handleBookmarkToggle}
                    className={`px-3 py-1.5 text-sm rounded-lg transition-colors ${
                      isBookmarked 
                        ? 'bg-orange-100 text-primary border border-orange-200 hover:bg-orange-200' 
                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                    }`}
                  >
                    {isBookmarked ? '북마크됨' : '북마크'}
                  </button>
                </div>
              )}
            </div>

            {/* 태그 및 AI 모델 */}
            <div className="flex flex-wrap items-center gap-2 mb-4">
              {prompt.aiModel && (
                <div className="flex items-center gap-1 bg-primary/10 text-primary text-xs px-2 py-1 rounded-full">
                  {typeof prompt.aiModel === 'object' && prompt.aiModel.icon && (
                    <Image
                      src={prompt.aiModel.icon}
                      alt={typeof prompt.aiModel === 'object' ? prompt.aiModel.name : prompt.aiModel}
                      width={16}
                      height={16}
                      className="rounded"
                    />
                  )}
                  <span className="font-medium">
                    {typeof prompt.aiModel === 'object' ? prompt.aiModel.name : prompt.aiModel}
                  </span>
                </div>
              )}
              
              {prompt.tags && prompt.tags.length > 0 && prompt.tags.map((tag, index) => (
                <span
                  key={index}
                  className="inline-block bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded-full"
                >
                  {tag}
                </span>
              ))}
            </div>

            {/* 설명 */}
            <p className="text-sm text-gray-700 mb-4">{prompt.description}</p>

            {/* 프롬프트 내용 */}
            <div className="mt-4 mb-6">
              <div className="flex items-center justify-between mb-2">
                <h2 className="text-base font-semibold">프롬프트 내용</h2>
                {isAuthenticated && (
                  <button
                    onClick={() => {
                      navigator.clipboard.writeText(prompt.content || '프롬프트 내용');
                      setToastMessage('프롬프트가 클립보드에 복사되었습니다!');
                      setToastType('success');
                      setShowToast(true);
                    }}
                    className="text-sm text-gray-600 hover:text-primary flex items-center gap-1"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                    </svg>
                    복사하기
                  </button>
                )}
              </div>
              <div className={`${!isAuthenticated ? 'blur-md pointer-events-none' : ''}`}>
                <div className="bg-gray-50 rounded-lg p-4 whitespace-pre-wrap border border-gray-200">
                  {prompt.content}
                </div>
              </div>
            </div>

            {/* 별점 시스템 */}
            <div className="mt-8 mb-4">
              <h3 className="text-lg font-semibold mb-2">평가하기</h3>
              <RatingSystem promptId={prompt.id.toString()} onRatingChange={(success, message) => { setToastMessage(message); setToastType(success ? "success" : "error"); setShowToast(true); }} />
            </div>

            {/* 공유하기 */}
            <div className="mt-8 mb-4">
              <h3 className="text-lg font-semibold mb-2">공유하기</h3>
              <SharePrompt promptId={prompt.id.toString()} title={prompt.title} />
            </div>

            {/* 구분선 */}
            <hr className="my-6 border-gray-200" />

            {/* 댓글 섹션 */}
            <div className="mt-6">
              <h2 className="text-lg font-semibold mb-4">댓글</h2>
              <CommentSection promptId={prompt.id.toString()} />
            </div>
          </div>
        </div>
      </main>

      {/* 토스트, 모달 등은 그대로 유지 */}
      {showToast && (
        <Toast
          message={toastMessage}
          type={toastType}
          onClose={() => setShowToast(false)}
        />
      )}

      {showLoginModal && (
        <div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
            {/* 로그인 모달 내용은 그대로 유지 */}
          </div>
        </div>
      )}

      {showDeleteModal && (
        <div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
            {/* 삭제 확인 모달 내용은 그대로 유지 */}
          </div>
        </div>
      )}
    </>
  );
};

export default PromptDetailPage;
