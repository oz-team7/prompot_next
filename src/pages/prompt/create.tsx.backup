import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Image from 'next/image';
import Header from '@/components/Header';
import { useAuth } from '@/contexts/AuthContext';
import Toast from '@/components/Toast';
import SharePrompt from '@/components/SharePrompt';

type CategoryType = 'work' | 'dev' | 'design' | 'edu' | 'image';

interface AIModel {
  id: string;
  name: string;
  icon: string;
}

import React, { useState } from 'react';
import { useRouter } from 'next/router';
import { supabase } from '@/lib/supabase-server';
import Image from 'next/image';

const CreatePromptPage = () => {
  const router = useRouter();
  const [image, setImage] = useState<File | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string>('');
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [content, setContent] = useState('');
  const [category, setCategory] = useState('work');
  const [tags, setTags] = useState<string[]>([]);
  const [aiModel, setAiModel] = useState('chatgpt');
  const [isPublic, setIsPublic] = useState(false);
  const [loading, setLoading] = useState(false);
              <div>
                <label htmlFor="content" className="block text-sm font-medium text-gray-700 mb-2">
                  프롬프트 내용
                </label>
                <textarea
                  id="content"
                  name="content"
                  value={formData.content}
                  onChange={handleChange}
                  rows={10}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary resize-none font-mono text-sm"
                  placeholder="프롬프트 내용을 입력하세요"
                />ated } = useAuth();
  const [showToast, setShowToast] = useState(false);
  const [toastMessage, setToastMessage] = useState('');
  const [toastType, setToastType] = useState<'success' | 'error'>('success');
  const [previewImages, setPreviewImages] = useState<string[]>([]);
  const [loading, setLoading] = useState(true);
  const maxImages = 5;

  const [formData, setFormData] = useState({
    title: '',
    category: 'work' as CategoryType,
    aiModel: 'chatgpt',
    tags: '',
    description: '',
    content: '', // 프롬프트 내용
    isPublic: true,
    mainImageIndex: 0, // 대표 이미지 인덱스
  });
  
  const [isDragging, setIsDragging] = useState(false);
  const [draggedIndex, setDraggedIndex] = useState<number | null>(null);

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    processImageFiles(files);
  };

  const removeImage = (index: number) => {
    setPreviewImages(prev => {
      const newImages = [...prev];
      newImages.splice(index, 1);
      return newImages;
    });
    
    // 만약 삭제된 이미지가 대표 이미지였다면, 대표 이미지를 첫 번째 이미지로 변경
    if (index === formData.mainImageIndex) {
      setFormData(prev => ({
        ...prev,
        mainImageIndex: 0
      }));
    } else if (index < formData.mainImageIndex) {
      // 삭제된 이미지가 대표 이미지 이전이었다면, 인덱스 조정
      setFormData(prev => ({
        ...prev,
        mainImageIndex: prev.mainImageIndex - 1
      }));
    }
  };

  const categories: { value: CategoryType; label: string }[] = [
    { value: 'work', label: '업무/마케팅' },
    { value: 'dev', label: '개발/코드' },
    { value: 'design', label: '디자인/브랜드' },
    { value: 'edu', label: '교육/학습' },
    { value: 'image', label: '이미지/아트' },
  ];

  const aiModels: AIModel[] = [
    { id: 'chatgpt', name: 'ChatGPT', icon: '/image/icon_chatgpt.png' },
    { id: 'claude', name: 'Claude', icon: '/image/icon_claude.png' },
    { id: 'claude_artifacts', name: 'Claude Artifacts', icon: '/image/icon_claude_artifacts.png' },
    { id: 'gemini', name: 'Gemini', icon: '/image/icon_gemini.png' },
    { id: 'gpt4_code', name: 'GPT-4 Code', icon: '/image/icon_gpt-4_code.png' },
    { id: 'midjourney', name: 'Midjourney', icon: '/image/icon_midjourney.png' },
    { id: 'dalle3', name: 'DALL·E 3', icon: '/image/icon_dall_e_3.png' },
    { id: 'stable_diffusion', name: 'Stable Diffusion', icon: '/image/icon_Stable_Diffusion.png' },
    { id: 'leonardo_ai', name: 'Leonardo AI', icon: '/image/icon_leonardo_ai.png' },
    { id: 'cursor', name: 'Cursor', icon: '/image/icon_cursor-ai.png' },
    { id: 'v0', name: 'v0', icon: '/image/icon_v0.png' },
    { id: 'bolt', name: 'Bolt', icon: '/image/icon_bolt-new.png' },
    { id: 'replit', name: 'Replit', icon: '/image/icon_Replit.png' },
    { id: 'lovable', name: 'Lovable', icon: '/image/icon_lovable.png' },
    { id: 'copy_ai', name: 'Copy.ai', icon: '/image/icon_Copy-ai.png' },
    { id: 'jasper', name: 'Jasper', icon: '/image/icon_jasper.png' },
    { id: 'wrtn', name: 'WRTN', icon: '/image/icon_wrtn.png' },
    { id: 'perplexity', name: 'Perplexity', icon: '/image/icon_perplexity.png' },
    { id: 'mistral', name: 'Mistral Large', icon: '/image/icon_mistrallarge.png' },
    { id: 'clovax', name: 'Clova X', icon: '/image/icon_clovax.png' },
    { id: 'sora', name: 'Sora', icon: '/image/icon_Sora.png' },
    { id: 'runway', name: 'Runway', icon: '/image/icon_runway.png' },
    { id: 'pika', name: 'Pika Labs', icon: '/image/icon_PikaLabs.png' },
    { id: 'kling', name: 'Kling', icon: '/image/icon_kling.png' },
    { id: 'heygen', name: 'HeyGen', icon: '/image/icon_heygen.png' },
    { id: 'synthesia', name: 'Synthesia', icon: '/image/icon_synthesia.png' },
    { id: 'elevenlabs', name: 'ElevenLabs', icon: '/image/icon_ElevenLabs.png' },
    { id: 'pictory', name: 'Pictory', icon: '/image/icon_pictory_logo.png' },
    { id: 'flexclip', name: 'FlexClip', icon: '/image/icon_flexclip.png' },
    { id: 'pollo', name: 'Pollo AI', icon: '/image/icon_pollo-ai.png' },
    { id: 'imagefx', name: 'ImageFX', icon: '/image/icon_imageFX.png' },
    { id: 'whisk', name: 'Whisk', icon: '/image/icon_whisk.png' },
    { id: 'controlnet', name: 'ControlNet', icon: '/image/icon_controlnet.png' },
  ];

  useEffect(() => {
    if (!isAuthenticated) {
      router.push('/login');
    } else {
      setLoading(false);
    }
  }, [isAuthenticated, router]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const processImageFiles = (files: File[]) => {
    if (previewImages.length + files.length > maxImages) {
      setToastMessage(`이미지는 최대 ${maxImages}장까지만 업로드할 수 있습니다.`);
      setToastType('error');
      setShowToast(true);
      return;
    }

    const processFile = (file: File) => {
      const maxSize = 2 * 1024 * 1024; // 2MB
      if (file.size > maxSize) {
        setToastMessage('각 이미지의 크기는 2MB 이하여야 합니다.');
        setToastType('error');
        setShowToast(true);
        return;
      }

      const reader = new FileReader();
      reader.onloadend = () => {
        setPreviewImages(prev => [...prev, reader.result as string]);
      };
      reader.readAsDataURL(file);
    };

    Array.from(files).forEach(processFile);
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    processImageFiles(files);
    e.target.value = '';
  };

  const handleDragEnter = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);

    const files = Array.from(e.dataTransfer.files).filter(file => 
      file.type.startsWith('image/')
    );
    
    if (files.length === 0) {
      setToastMessage('이미지 파일만 업로드할 수 있습니다.');
      setToastType('error');
      setShowToast(true);
      return;
    }

    processImageFiles(files);
  };

  // 이미지 순서 변경을 위한 드래그 앤 드롭 핸들러
  const handleImageDragStart = (index: number) => {
    setDraggedIndex(index);
  };

  const handleImageDragOver = (e: React.DragEvent, index: number) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleImageDrop = (e: React.DragEvent, dropIndex: number) => {
    e.preventDefault();
    e.stopPropagation();

    if (draggedIndex === null) return;

    const newImages = [...previewImages];
    const draggedImage = newImages[draggedIndex];
    
    // 이미지 순서 변경
    newImages.splice(draggedIndex, 1);
    newImages.splice(dropIndex, 0, draggedImage);
    
    setPreviewImages(newImages);
    setDraggedIndex(null);

    // 대표 이미지 인덱스 업데이트
    if (formData.mainImageIndex === draggedIndex) {
      setFormData(prev => ({ ...prev, mainImageIndex: dropIndex }));
    } else if (
      formData.mainImageIndex > draggedIndex && 
      formData.mainImageIndex <= dropIndex
    ) {
      setFormData(prev => ({ ...prev, mainImageIndex: prev.mainImageIndex - 1 }));
    } else if (
      formData.mainImageIndex < draggedIndex && 
      formData.mainImageIndex >= dropIndex
    ) {
      setFormData(prev => ({ ...prev, mainImageIndex: prev.mainImageIndex + 1 }));
    }
  };

  const setMainImage = (index: number) => {
    setFormData(prev => ({ ...prev, mainImageIndex: index }));
    setToastMessage('대표 이미지가 설정되었습니다.');
    setToastType('success');
    setShowToast(true);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!isAuthenticated) {
      router.push('/login');
      return;
    }
    
    setLoading(true);

    // 모든 필드를 선택적으로 처리
    const processedData = {
      title: formData.title.trim(),
      description: formData.content?.trim() || '', // content를 description으로 사용
      content: formData.content?.trim() || '',
      category: formData.category || 'work',
      aiModel: formData.aiModel || 'chatgpt',
      tags: formData.tags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0),
      isPublic: formData.isPublic,
      previewImage: previewImages[formData.mainImageIndex] || null
    };

    const submitButton = (e.target as HTMLFormElement).querySelector('button[type="submit"]') as HTMLButtonElement;
    if (submitButton) {
      submitButton.disabled = true;
    }

    try {
      const token = localStorage.getItem('token');
      
      // 데이터 정제
      const processedTags = formData.tags
        .split(',')
        .map(tag => tag.trim())
        .filter(tag => tag.length > 0);

      const submitData = {
        title: formData.title.trim(),
        description: formData.description.trim(),
        content: formData.content.trim(),
        category: formData.category,
        aiModel: formData.aiModel,
        tags: processedTags,
        isPublic: formData.isPublic,
        previewImage: previewImages[formData.mainImageIndex] || null,
      };

      console.log('Submitting data:', submitData); // 디버깅용

      const res = await fetch('/api/prompts/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...(token && { 'Authorization': `Bearer ${token}` }),
        },
        credentials: 'include',
        body: JSON.stringify(submitData),
      });

      let data;
      try {
        data = await res.json();
        console.log('Server response:', data); // 디버깅용
      } catch (e) {
        console.error('JSON parsing error:', e); // 디버깅용
        throw new Error('서버 응답을 처리하는데 실패했습니다.');
      }

      if (!res.ok) {
        if (res.status === 401) {
          throw new Error('로그인이 필요합니다. 다시 로그인해주세요.');
        }
        throw new Error(data?.message || '프롬프트 생성에 실패했습니다.');
      }

      setToastMessage('프롬프트가 성공적으로 생성되었습니다!');
      setToastType('success');
      setShowToast(true);

      // 성공 시 마이페이지로 이동
      setTimeout(() => {
        router.push('/mypage?tab=prompts&refresh=true');
      }, 1500);
    } catch (error: any) {
      console.error('Create prompt error:', error);
      setToastMessage(
        error.message === 'Failed to fetch'
          ? '서버 연결에 실패했습니다. 인터넷 연결을 확인해주세요.'
          : error.message || '프롬프트 생성 중 오류가 발생했습니다.'
      );
      setToastType('error');
      setShowToast(true);
    } finally {
      const submitButton = (e.target as HTMLFormElement).querySelector('button[type="submit"]') as HTMLButtonElement;
      if (submitButton) {
        submitButton.disabled = false;
      }
    }
  };

  if (loading) {
    return (
      <>
        <Header />
        <div className="min-h-screen flex items-center justify-center">
          <div className="text-center">
            <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-primary mb-4"></div>
            <p className="text-gray-600">로딩 중...</p>
          </div>
        </div>
      </>
    );
  }

  return (
    <>
      <Header />
      <main className="min-h-screen bg-gray-50">
        <div className="container mx-auto px-4 py-6 max-w-4xl">
          <div className="bg-white rounded-lg shadow-sm p-6">
            <h1 className="text-2xl font-bold mb-6">프롬프트 작성</h1>
            
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* 제목 */}
              <div>
                <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-2">
                  제목
                </label>
                <input
                  type="text"
                  id="title"
                  name="title"
                  value={formData.title}
                  onChange={handleChange}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                  placeholder="프롬프트 제목을 입력하세요"
                />
              </div>

              {/* 카테고리 및 AI 모델 */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-2">
                    카테고리
                  </label>
                  <select
                    id="category"
                    name="category"
                    value={formData.category}
                    onChange={handleChange}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                  >
                    {categories.map(cat => (
                      <option key={cat.value} value={cat.value}>
                        {cat.label}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label htmlFor="aiModel" className="block text-sm font-medium text-gray-700 mb-2">
                    AI 모델
                  </label>
                  <div className="relative">
                    <select
                      id="aiModel"
                      name="aiModel"
                      value={formData.aiModel}
                      onChange={handleChange}
                      className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary appearance-none"
                    >
                      {aiModels.map(model => (
                        <option key={model.id} value={model.id}>
                          {model.name}
                        </option>
                      ))}
                    </select>
                    <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
                      <Image
                        src={aiModels.find(m => m.id === formData.aiModel)?.icon || '/image/icon_chatgpt.png'}
                        alt={aiModels.find(m => m.id === formData.aiModel)?.name || 'AI Model'}
                        width={20}
                        height={20}
                        className="rounded"
                      />
                    </div>
                    <div className="absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none">
                      <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* 미리보기 이미지 */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  미리보기 이미지
                  <span className="text-xs text-gray-500 ml-2">(최대 {maxImages}장)</span>
                </label>
                <div 
                  className={`space-y-4 ${isDragging ? 'bg-gray-50' : ''}`}
                  onDragEnter={handleDragEnter}
                  onDragLeave={handleDragLeave}
                  onDragOver={handleDragOver}
                  onDrop={handleDrop}
                >
                  <div className="flex flex-wrap gap-4">
                    {previewImages.map((image, index) => (
                      <div 
                        key={index} 
                        className={`relative w-32 h-24 ${
                          index === formData.mainImageIndex ? 'ring-2 ring-primary' : ''
                        }`}
                        draggable
                        onDragStart={() => handleImageDragStart(index)}
                        onDragOver={(e) => handleImageDragOver(e, index)}
                        onDrop={(e) => handleImageDrop(e, index)}
                      >
                        <Image
                          src={image}
                          alt={`Preview ${index + 1}`}
                          fill
                          className="object-cover rounded-lg"
                        />
                        <div className="absolute -top-2 -right-2 flex gap-1">
                          <button
                            type="button"
                            onClick={() => setMainImage(index)}
                            className={`w-6 h-6 ${
                              index === formData.mainImageIndex ? 'bg-primary' : 'bg-gray-500'
                            } text-white rounded-full flex items-center justify-center hover:bg-primary transition-colors`}
                            title="대표 이미지로 설정"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                            </svg>
                          </button>
                          <button
                            type="button"
                            onClick={() => removeImage(index)}
                            className="w-6 h-6 bg-red-500 text-white rounded-full flex items-center justify-center hover:bg-red-600 transition-colors"
                            title="이미지 삭제"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                            </svg>
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                  {previewImages.length < maxImages && (
                    <div className="flex items-center justify-center w-full">
                      <label htmlFor="dropzone-file" className="flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100">
                        <div className="flex flex-col items-center justify-center pt-5 pb-6">
                          <svg className="w-8 h-8 mb-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                          </svg>
                          <p className="mb-2 text-sm text-gray-500">
                            <span className="font-semibold">클릭</span> 또는 이미지를 여기로 드래그하세요
                          </p>
                        </div>
                        <input id="dropzone-file" type="file" className="hidden" accept="image/*" multiple onChange={handleFileSelect} />
                      </label>
                    </div>
                  )}
                </div>
              </div>

              {/* 프롬프트 내용 */}
              <div>
                <label htmlFor="content" className="block text-sm font-medium text-gray-700 mb-2">
                  프롬프트 내용
                </label>
                <textarea
                  id="content"
                  name="content"
                  value={formData.content}
                  onChange={handleChange}
                  rows={8}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                  placeholder="프롬프트 내용을 입력하세요"
                />
              </div>

              {/* 태그 */}
              <div>
                <label htmlFor="tags" className="block text-sm font-medium text-gray-700 mb-2">
                  태그 (쉼표로 구분)
                </label>
                <input
                  type="text"
                  id="tags"
                  name="tags"
                  value={formData.tags}
                  onChange={handleChange}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                  placeholder="예: 마케팅, 이메일, 고객응대"
                />
              </div>

              {/* 공개 여부 */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  공개 여부
                </label>
                <div className="flex items-center space-x-4">
                  <label className="inline-flex items-center">
                    <input
                      type="radio"
                      name="isPublic"
                      checked={formData.isPublic}
                      onChange={() => setFormData(prev => ({ ...prev, isPublic: true }))}
                      className="form-radio text-primary"
                    />
                    <span className="ml-2">공개</span>
                  </label>
                  <label className="inline-flex items-center">
                    <input
                      type="radio"
                      name="isPublic"
                      checked={!formData.isPublic}
                      onChange={() => setFormData(prev => ({ ...prev, isPublic: false }))}
                      className="form-radio text-primary"
                    />
                    <span className="ml-2">비공개</span>
                  </label>
                </div>
              </div>

              {/* 내용 */}
              {/* 미리보기 이미지 */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  미리보기 이미지
                  <span className="text-xs text-gray-500 ml-2">(최대 {maxImages}장, 각 2MB 이하)</span>
                </label>
                <div 
                  className={`space-y-4 ${isDragging ? 'bg-gray-50' : ''}`}
                  onDragEnter={handleDragEnter}
                  onDragLeave={handleDragLeave}
                  onDragOver={handleDragOver}
                  onDrop={handleDrop}
                >
                  <div className="flex flex-wrap gap-4">
                    {previewImages.map((image, index) => (
                      <div 
                        key={index} 
                        className={`relative w-32 h-24 ${
                          index === formData.mainImageIndex ? 'ring-2 ring-primary' : ''
                        }`}
                        draggable
                        onDragStart={() => handleImageDragStart(index)}
                        onDragOver={(e) => handleImageDragOver(e, index)}
                        onDrop={(e) => handleImageDrop(e, index)}
                      >
                        <Image
                          src={image}
                          alt={`Preview ${index + 1}`}
                          fill
                          className="object-cover rounded-lg"
                        />
                        <div className="absolute -top-2 -right-2 flex gap-1">
                          <button
                            type="button"
                            onClick={() => setMainImage(index)}
                            className={`w-6 h-6 ${
                              index === formData.mainImageIndex ? 'bg-primary' : 'bg-gray-500'
                            } text-white rounded-full flex items-center justify-center hover:bg-primary transition-colors`}
                            title="대표 이미지로 설정"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                            </svg>
                          </button>
                          <button
                            type="button"
                            onClick={() => {
                              const newImages = previewImages.filter((_, i) => i !== index);
                              setPreviewImages(newImages);
                              if (index === formData.mainImageIndex) {
                                setFormData(prev => ({ ...prev, mainImageIndex: 0 }));
                              } else if (index < formData.mainImageIndex) {
                                setFormData(prev => ({ ...prev, mainImageIndex: prev.mainImageIndex - 1 }));
                              }
                            }}
                            className="w-6 h-6 bg-red-500 text-white rounded-full flex items-center justify-center hover:bg-red-600 transition-colors"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                            </svg>
                          </button>
                        </div>
                        <div className="absolute bottom-0 left-0 right-0 bg-black bg-opacity-50 text-white text-xs p-1 text-center rounded-b-lg">
                          {index + 1}/{previewImages.length}
                        </div>
                      </div>
                    ))}
                  </div>
                  {previewImages.length < maxImages && (
                    <div className={`border-2 border-dashed rounded-lg p-8 text-center ${
                      isDragging ? 'border-primary bg-primary bg-opacity-10' : 'border-gray-300'
                    }`}>
                      <label className="flex flex-col items-center gap-2 cursor-pointer">
                        <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                        </svg>
                        <span className="text-sm text-gray-600">
                          이미지를 드래그하여 업로드하거나 클릭하여 선택하세요
                        </span>
                        <span className="text-xs text-gray-500">
                          ({previewImages.length}/{maxImages})
                        </span>
                        <input
                          type="file"
                          accept="image/*"
                          onChange={handleImageUpload}
                          multiple
                          className="hidden"
                        />
                      </label>
                    </div>
                  )}
                </div>
              </div>

              {/* 프롬프트 내용 */}
              <div>
                <label htmlFor="content" className="block text-sm font-medium text-gray-700 mb-2">
                  내용
                </label>
                <textarea
                  id="description"
                  name="description"
                  value={formData.description}
                  onChange={handleChange}
                  rows={10}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary resize-none font-mono text-sm"
                  placeholder="프롬프트 내용을 입력하세요"
                />
              </div>

              {/* 공개/비공개 설정 */}
              <div className="border-t pt-4">
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  공개 설정
                </label>
                <div className="space-y-2">
                  <label className="flex items-start gap-3 cursor-pointer">
                    <input
                      type="radio"
                      name="isPublic"
                      value="true"
                      checked={formData.isPublic === true}
                      onChange={() => setFormData(prev => ({ ...prev, isPublic: true }))}
                      className="mt-1"
                    />
                    <div>
                      <p className="font-medium text-gray-900">공개</p>
                      <p className="text-sm text-gray-600">
                        모든 사용자가 이 프롬프트를 검색하고 사용할 수 있습니다.
                      </p>
                    </div>
                  </label>
                  <label className="flex items-start gap-3 cursor-pointer">
                    <input
                      type="radio"
                      name="isPublic"
                      value="false"
                      checked={formData.isPublic === false}
                      onChange={() => setFormData(prev => ({ ...prev, isPublic: false }))}
                      className="mt-1"
                    />
                    <div>
                      <p className="font-medium text-gray-900">비공개</p>
                      <p className="text-sm text-gray-600">
                        본인만 이 프롬프트를 볼 수 있습니다.
                      </p>
                    </div>
                  </label>
                </div>
              </div>

              {/* 공유하기 */}
              <div className="mt-6">
                <h3 className="text-lg font-medium mb-2">공유하기</h3>
                <div className="bg-gray-50 rounded-lg p-4">
                  <p className="text-sm text-gray-600 mb-4">프롬프트를 생성한 후 공유할 수 있습니다.</p>
                </div>
              </div>

              {/* 버튼 */}
              <div className="flex gap-3 justify-end mt-8">
                <button
                  type="button"
                  onClick={() => router.back()}
                  className="px-6 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  취소
                </button>
                <button
                  type="submit"
                  className="px-6 py-2 bg-primary text-white rounded-lg hover:bg-orange-600 transition-colors"
                >
                  프롬프트 생성
                </button>
              </div>
            </form>
          </div>
        </div>
      </main>

      {/* Toast 알림 */}
      {showToast && (
        <Toast
          message={toastMessage}
          type={toastType}
          onClose={() => setShowToast(false)}
        />
      )}
    </>
  );
};

export default CreatePromptPage;